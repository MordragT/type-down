% Run with cargo run -- compile <html, pdf, docx, json> examples/reference.tyd
= Heading

Everything is evaluated to their raw functions.
These functions can also be called instead but the syntactic sugar is prefered. So for the link or image use the shorter syntax instead of the function call if possible

== Emphasis

This is *bold* and this is /italic/
This is strikethrough ~asdasd~

== Links

These are links:

- <mailto:contact@example.com>[Link]
- <http://example.com>
- <http://example.com>[Click here]

```
- <mailto:contact@example.com>[Link]
- <http://example.com>
- <http://example.com>[Click here]
```

== Images

#image(src: "test.png") % TODO [Alternative text]


```typst
#image(src: "test.png") % TODO [Alternative text]

```

`(lang="rust")
asdasd
asdasd
as
`

[(id="test") Some more text]

#image[
    {src }
    asdasd
    asdasd
    asdas
]

== Labels

Text cannot be labelled at the moment, but blocks and block items can.
And labels can be referenced everywhere.

- labelled list {list}

Here is the reference @list

```
- labelled list {list}

Here is the reference @list
```

== Blockqoute

> This is a block quote

>> Nested blockquote

> - List inside blockquote
> - over multiple lines

```md
> This is a block quote

>> Nested blockquote

> - List inside blockquote
> - over multiple lines
```

== Lists

Lists can be numbered and unnumbered:

- some
- bullet
- list
    - with
    - indentation

+ some
+ numbered
+ list
    + with
    + indentation

- some
- bullet
    + and ordered
- list

```typst
- some
- bullet
- list
    - with
    - indentation

+ some
+ numbered
+ list
    + with
    + indentation

- some
- bullet
    + and ordered
- list
```

== Tables

| one | row |

| *Some column* | *Other column*    |
| and content   | and more /stuff/  |
| - a list Here | > - and a quote   |
| - over lines  | something else    |

```md
| one | row |

| *Some column* | *Other column*    |
| and content   | and more /stuff/  |
| - a list Here | > - and a quote   |
| - over lines  | something else    |

```

== Divs

[ warning {label}
this is some text within a div ]

```
[ warning {label}
this is some text within a div
]
```

== Math

Math mode is similar to typst

% $ x = y ^ 10 / 200 * 20 $

== Raw

Raw text can be `inlined`, but code blocks:

```rust
fn main() {}
```

are also possible

== Various

=== Escape

To escape special characters use \\.

=== Comments

```
% - commented
% - out
% - list
```

=== Quotes

Single quotes are ignored and can be used freely:

- I'm using a single quote

Double quotes however must be closed in the line

- "Here is a quote"

```md
- "Here is a quote"
```

% - Line break: \
% - Symbols: vielleicht eher :Episilon:


== Code

- extensions use the `#function(arguments)[inner content]` syntax
    - must evaluate to content if used inline
    - allows for graceful handling if implementation does not support extension
- besides functions there exist some more code expressions:

*The following is highly experimental*:

=== Binding

```tyd
#let author = "Max Mustermann"
This text was written by #author
```

Return values of functions can also be binded

```tyd
#let some_image = image("example.com")[alt]

Now show the image multiple times

#some_image

#some_image
```

=== Content Block

```tyd
#[Some *very* important content]
```

=== Code block

```tyd
#{
    let author = "Max Mustermann"
    let birth_date = "1.1.1960"
    let age = 63
    let info = [Max Mustermann is an _excellent_ author]
    let dict = (
        author: "Max Mustermann",
        birth_date: "1.1.1960",
        age: 63,
    )
}
```

=== Include

Includes other files and evaluates them at the position of the file

```tyd
#include("other.td")
```

=== Imports

Imports let bindings and macros of other files and creates dictionary of it

```tyd
#let other = import("other.td")

#other.description
```

dict desturcturing

```tyd
#let (name, description) = import("other.td")
```

=== Control structures

```tyd
#if x == y { } else if x > y { } else { }

#for x in (1, 2, 3).reverse() { }

#for (key, value) in dict { }
```

Macros are less powerful then typst functions as they cannot be called recursively

```tyd
#macro template(name, age) = [
    Hello #name you are #age years old.
]
```

== Use Cases

- slide deck
- notion, obsidian, logseq
- no html :D
